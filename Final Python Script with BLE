# This is the fully functioning script to run the RPi in conjunction with the HC-05 bluetooth module on the Arduino Uno. 

import binascii
import sys
import Adafruit_PN532 as PN532
from Adafruit_CharLCD import Adafruit_CharLCD
from time import sleep, strftime
from datetime import datetime
import socket
import csv
import serial
import time

# NFC Configuration for a Raspberry Pi:
CS   = 18
MOSI = 23
MISO = 24
SCLK = 25

# Create an instance of the PN532 class.
pn532 = PN532.PN532(cs=CS, sclk=SCLK, mosi=MOSI, miso=MISO)

# Call begin to initialize communication with the PN532.
pn532.begin()

# Configure PN532 to communicate with MiFare cards.
pn532.SAM_configuration()

# LCD Configuration for a Raspberry Pi
lcd = Adafruit_CharLCD(rs=26, en=19, d4=13, d5=6, d6=5, d7=11, cols=16, lines=2)

# Define LCD Parameters and Initiate a base display
def get_ip_address():
    return [
             (s.connect(('8.8.8.8', 53)),
              s.getsockname()[0],
              s.close()) for s in
                  [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]
           ][0][1]

def send_serial_ble(value):

    #Initiate bluetooth communication with appropriate port and baud rate
                    
    print("Start")
    port="/dev/rfcomm0" #This will be different for various devices and on windows it will probably be a COM port.
    bluetooth=serial.Serial(port, 9600)#Start communications with the bluetooth unit
    print("On_Off_Light = 1")
    print(str(value))
    bluetooth.write(b"BOOP "+str.encode(str(value)))#These need to be bytes not unicode, plus a number
    bluetooth.close() #Otherwise the connection will remain open until a timeout which ties up the /dev/thingamabob

# Displays IP address on RPi's 1602A LCD Screen
try:
    while 1:
        lcd.clear()
        ip = get_ip_address()
        lcd.message(datetime.now().strftime('%b %d  %H:%M:%S\n'))
        lcd.message('IP {}'.format(ip))
            
        # Check if a card is available to read.
        uid = pn532.read_passive_target()

        if uid is None:
            sleep(2)
            continue
        
        with open("/home/pi/Desktop/card_scanner/stored_data.csv", "rb") as readFile:
            #bottles = csv.reader(b)
            #bottle_list.extend(bottles)
            reader = csv.reader(readFile)
            data = list(csv.reader(readFile))
            user_id = [i[0] for i in data]
            on_off_light = [i[3] for i in data]
            print(str(user_id))

            for i, value in enumerate(user_id):
                
                print(value)
                print(i)
                
                length = len(user_id) - 1
                
                if value == str(binascii.hexlify(uid)):
                    
                    #Concatenate first and last name stored in the Data file
                    
                    name = str(str(data[i][1]) + ' ' + str(data[i][2]))
                    
                    lcd.clear()
                    lcd.message('____Welcome!____\n')
                    lcd.message(name)
                    
                    print(str(on_off_light))
                    print(str(data[i][3]))   
                    
                    if data[i][3] == str(0):
                        
                        send_serial_ble(1)
                        data[i][3] = "1"
                        print(str(data))
                        
                    elif data[i][3] == str(1):
                        
                        send_serial_ble(0)
                        data[i][3] = "0"
                        print(str(data))
                    
                    #write to csv file that keeps track of log-in times
                    with open("/home/pi/Desktop/card_scanner/login_manager.csv", "a") as log:
                        row_ = [strftime("%Y-%m-%d %H:%M:%S"),str(binascii.hexlify(uid)),str(data[i][1]),str(data[i][2])]
                        writer = csv.writer(log)
                        writer.writerow(row_)
                        log.close()
                        readFile.close()
                        sleep(5)
                        
                    break
                        
                if i == length and value != str(binascii.hexlify(uid)):
                    
                    lcd.clear()
                    lcd.message('New User\n')
                    lcd.message('ID: ' + str(binascii.hexlify(uid)))
                    readFile.close()
                    sleep(5)
                    
                    break
                
        # Write data to the csv file and replace the lines in the line_to_override dict.
        with open("/home/pi/Desktop/card_scanner/stored_data.csv", 'wb') as writeFile:
            writer = csv.writer(writeFile)
            for line, row in enumerate(data):
                new_data =[data[line][0],data[line][1],data[line][2],data[line][3]]
                writer.writerow(new_data)
                    
# Create an escape method for the case that the program freezes up or the user no longer has access to the terminal
except KeyboardInterrupt:
    print('CTRL-C pressed.  Program exiting...')
    
# Display the closing message on the LCD screen
finally:
    lcd.clear()
    lcd.message('CTRL-C Pressed\n')
    lcd.message('Shutting Down...')
    
    send_serial_ble(3)
    
    sleep(2)
    lcd.clear()
